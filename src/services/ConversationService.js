const Conversation = require("../models/Conversation");

const ConversationService = {
  // L·∫•y danh s√°ch h·ªôi tho·∫°i c·ªßa ng∆∞·ªùi d√πng
  async getListByUserId(userId) {
    return await Conversation.getListByUserId(userId);
  },
  // üîç Ki·ªÉm tra xem cu·ªôc tr√≤ chuy·ªán c√° nh√¢n gi·ªØa 2 user c√≥ t·ªìn t·∫°i kh√¥ng
  async findOrCreateIndividualConversation(userId1, userId2) {
    // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ cu·ªôc tr√≤ chuy·ªán 1-1 gi·ªØa hai user
    let conversation = await Conversation.existsIndividualConversation(
      userId1,
      userId2
    );
    if (conversation) {
      return await Conversation.getById(conversation);
    }

    // N·∫øu ch∆∞a c√≥, t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
    conversation = new Conversation({
      members: [userId1, userId2],
      type: false, // Chat c√° nh√¢n
    });
    await conversation.save();
    return conversation;
  },
  // t·∫°o cu·ªôc tr√≤ chuy·ªán nh√≥m
  async createGroupConversation(name, members, leaderId) {
    if (members.length < 2) {
      throw new Error("Group conversation must have at least 2 members");
    }
    const conversation = new Conversation({
      name,
      members,
      leaderId,
      type: true, // Chat nh√≥m
    });
    await conversation.save();
    return conversation;
  },
  // üîπ ƒê·ªïi t√™n nh√≥m h·ªôi tho·∫°i
  async updateGroupName(conversationId, newName, userId) {
    const conversation = await Conversation.findById(conversationId);

    if (!conversation) {
      throw new Error("Conversation not found");
    }

    if (!conversation.type) {
      throw new Error("Cannot rename an individual conversation");
    }

    // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† leader ho·∫∑c qu·∫£n tr·ªã vi√™n kh√¥ng
    if (
      conversation.leaderId.toString() !== userId &&
      !conversation.managerIds.includes(userId)
    ) {
      throw new Error("You do not have permission to rename this group");
    }
    conversation.name = newName;
    await conversation.save();
    return conversation;
  },
  // L·∫•y h·ªôi tho·∫°i theo ID
  async getConversationById(conversationId) {
    return await Conversation.getById(conversationId);
  },

  // Ki·ªÉm tra h·ªôi tho·∫°i c√° nh√¢n gi·ªØa hai user
  async existsIndividualConversation(userId1, userId2) {
    return await Conversation.existsIndividualConversation(userId1, userId2);
  },
  async getByIdAndUserId(conversationId, userId) {
    return await Conversation.getByIdAndUserId(conversationId, userId);
  },
};

module.exports = ConversationService;
