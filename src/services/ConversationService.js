const Conversation = require("../models/Conversation");
const Member = require("../models/Member");
const User = require("../models/User");
const Message = require("../models/Message");
const Channel = require("../models/Channel");
const ConversationService = {
  // L·∫•y danh s√°ch h·ªôi tho·∫°i c·ªßa ng∆∞·ªùi d√πng
  async getListByUserId(userId) {
    // ƒë√£ conver member
    return await Conversation.getListByUserId(userId);
  },
  // üîç Ki·ªÉm tra xem cu·ªôc tr√≤ chuy·ªán c√° nh√¢n gi·ªØa 2 user c√≥ t·ªìn t·∫°i kh√¥ng
  async findOrCreateIndividualConversation(userId1, userId2) {
    // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ cu·ªôc tr√≤ chuy·ªán 1-1 gi·ªØa hai user
    // ƒë√£ conver member
    let conversation = await Conversation.existsIndividualConversation(
      userId1,
      userId2
    );
    if (conversation) {
      return await Conversation.getById(conversation);
    }

    // N·∫øu ch∆∞a c√≥, t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
    conversation = new Conversation({
      // members: [userId1, userId2],
      type: false, // Chat c√° nh√¢n
    });
    // L·∫•y th√¥ng tin User ƒë·ªÉ l·∫•y name
    const user1 = await User.getSummaryById(userId1);
    const user2 = await User.getSummaryById(userId2);

    // T·∫°o Member v·ªõi name t·ª´ User
    const membersToCreate = [
      {
        conversationId: conversation._id,
        userId: userId1,
        name: user1.name,
      },
      {
        conversationId: conversation._id,
        userId: userId2,
        name: user2.name,
      },
    ];
    const createdMembers = await Member.insertMany(membersToCreate);
    // Th√™m c√°c th√†nh vi√™n v√†o h·ªôi tho·∫°i
    conversation.members = createdMembers.map((member) => member._id);
    await conversation.save();
    return conversation;
  },
  // t·∫°o cu·ªôc tr√≤ chuy·ªán nh√≥m
  async createGroupConversation(name, members, leaderId) {
    if (members.length < 2) {
      throw new Error("Group conversation must have at least 2 members");
    }
    const conversation = new Conversation({
      name,
      // leaderId, // Ng∆∞·ªùi t·∫°o nh√≥m
      type: true, // Chat nh√≥m
    });
    // L·∫•y th√¥ng tin t·∫•t c·∫£ User trong members
    const users = await User.find({ _id: { $in: members }, isActived: true })
      .select("_id name")
      .lean();
    if (users.length !== members.length) {
      throw new Error("One or more users not found");
    }
    // T·∫°o map ƒë·ªÉ √°nh x·∫° userId v·ªõi name
    const userMap = new Map(
      users.map((user) => [user._id.toString(), user.name])
    );

    // T·∫°o Member v·ªõi name t·ª´ User
    const membersToCreate = members.map((userId) => ({
      conversationId: conversation._id,
      userId,
      name: userMap.get(userId.toString()) || "Unknown", // M·∫∑c ƒë·ªãnh "Unknown" n·∫øu kh√¥ng t√¨m th·∫•y
    }));
    const createdMembers = await Member.insertMany(membersToCreate);

    // L·∫•y memberId t·ª´ c√°c Member v·ª´a t·∫°o
    const memberIds = createdMembers.map((member) => member._id);
    const leaderMember = createdMembers.find(
      (member) => member.userId.toString() === leaderId.toString()
    );
    // T·∫°o channel m·∫∑c ƒë·ªãnh "Main"
    const defaultChannel = new Channel({
      name: "Main",
      conversationId: conversation._id,
    });
    await defaultChannel.save();
    // C·∫≠p nh·∫≠t members trong Conversation
    conversation.members = memberIds;
    conversation.leaderId = leaderMember._id; // C·∫≠p nh·∫≠t leaderId t·ª´ memberId
    await conversation.save();
    return {
      conversation,
      defaultChannel,
    };
  },
  // üîπ ƒê·ªïi t√™n nh√≥m h·ªôi tho·∫°i
  async updateGroupName(conversationId, newName, userId) {
    const conversation = await Conversation.findById(conversationId);
    const member = await Member.getByConversationIdAndUserId(
      conversationId,
      userId
    );
    if (!conversation) {
      throw new Error("Conversation not found");
    }

    if (!conversation.type) {
      throw new Error("Cannot rename an individual conversation");
    }

    // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† leader ho·∫∑c qu·∫£n tr·ªã vi√™n kh√¥ng
    if (!this.checkManager(conversation, member._id.toString())) {
      throw new Error("You do not have permission to rename this group");
    }
    conversation.name = newName;
    await conversation.save();
    return conversation;
  },
  // üîπ C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán nh√≥m h·ªôi tho·∫°i
  async updateAvatar(conversationId, userId, avatar) {
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }
    // T√¨m memberId t·ª´ userId
    const member = await Member.getByConversationIdAndUserId(
      conversationId,
      userId
    );
    if (!member) {
      throw new Error("You are not a member of this conversation");
    }

    // Ki·ªÉm tra quy·ªÅn: Ch·ªâ leader ho·∫∑c manager ƒë∆∞·ª£c c·∫≠p nh·∫≠t avatar
    if (!this.checkManager(conversation, member._id.toString())) {
      throw new Error("You do not have permission to update the avatar");
    }
    // C·∫≠p nh·∫≠t avatar
    conversation.avatar = avatar;
    await conversation.save();
    // T·∫°o tin nh·∫Øn notify
    const notifyMessage = await Message.createMessage({
      memberId: member._id,
      content: `${member.name} ƒë√£ thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán c·ªßa nh√≥m`,
      type: "NOTIFY",
      conversationId: conversation._id,
    });
    // C·∫≠p nh·∫≠t lastMessageId trong Conversation
    conversation.lastMessageId = notifyMessage._id;
    await conversation.save();
    return conversation;
  },
  // L·∫•y h·ªôi tho·∫°i theo ID
  async getConversationById(conversationId) {
    return await Conversation.getById(conversationId);
  },
  async getByIdAndUserId(conversationId, userId) {
    return await Conversation.getByIdAndUserId(conversationId, userId);
  },
  checkManager(conversation, id) {
    let isManager = false;
    if (
      conversation.leaderId.toString() === id ||
      conversation.managerIds.includes(id)
    ) {
      isManager = true;
    }
    return isManager;
  },
  // ( ·∫©n tin nh·∫Øn trong h·ªôi tho·∫°i cho member c√≥ nhu c·∫ßu x√≥a h·ªôi tho·∫°i)
  async hideConversationBeforeTime(conversationId, userId) {
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }
    // T√¨m memberId t·ª´ userId
    const member = await Member.getByConversationIdAndUserId(
      conversationId,
      userId
    );
    if (!member) {
      throw new Error("You are not a member of this conversation");
    }
    // Ghi nh·∫≠n th·ªùi gian hi·ªán t·∫°i v√†o hideBeforeTime
    member.hideBeforeTime = new Date();
    await member.save();
    return {
      message:
        "Conversation messages before this time have been hidden for you",
    };
  },
  // L·∫•y danh s√°ch th√†nh vi√™n trong h·ªôi tho·∫°i
  async getMembersByConversationId(conversationId, userId) {
    // Ki·ªÉm tra h·ªôi tho·∫°i
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }

    // Ki·ªÉm tra xem userId c√≥ ph·∫£i th√†nh vi√™n kh√¥ng
    const requestingMember = await Member.getByConversationIdAndUserId(
      conversationId,
      userId
    );
    if (!requestingMember) {
      throw new Error("You are not a member of this conversation");
    }
    // L·∫•y danh s√°ch th√†nh vi√™n
    const members = await Member.getMembersWithUserInfo(conversationId);

    const memberList = members.map((member) => ({
      memberId: member._id,
      userId: member.userId._id,
      name: member.name,
      avatar: member.userId.avatar,
      avatarColor: member.userId.avatarColor,
    }));

    return memberList;
  },
  // Th√™m th√†nh vi√™n v√†o h·ªôi tho·∫°i
  async addMembersToConversation(conversationId, userId, newUserIds) {
    // Ki·ªÉm tra xem h·ªôi tho·∫°i c√≥ t·ªìn t·∫°i kh√¥ng
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }
    if (!conversation.type) {
      throw new Error("Cannot add members to an individual conversation");
    }
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† th√†nh vi√™n kh√¥ng
    const requestingMember = await Member.findOne({ conversationId, userId });
    if (!requestingMember) {
      throw new Error("You are not a member of this conversation");
    }

    if (!this.checkManager(conversation, requestingMember._id.toString())) {
      throw new Error("You do not have permission to add members");
    }
    // Ki·ªÉm tra xem c√°c userId c√≥ t·ªìn t·∫°i v√† ho·∫°t ƒë·ªông kh√¥ng
    const users = await User.find({ _id: { $in: newUserIds }, isActived: true })
      .select("_id name")
      .lean();

    if (users.length !== newUserIds.length) {
      throw new Error("One or more users not found or inactive");
    }
    // T·∫°o map ƒë·ªÉ √°nh x·∫° userId v·ªõi name
    const userMap = new Map(
      users.map((user) => [user._id.toString(), user.name])
    );
    // Ki·ªÉm tra xem c√°c th√†nh vi√™n ƒë√£ t·ªìn t·∫°i trong h·ªôi tho·∫°i ch∆∞a
    const existingMembers = await Member.find({
      conversationId,
      userId: { $in: newUserIds },
    });
    // L·∫•y danh s√°ch userId c·ªßa c√°c th√†nh vi√™n ƒë√£ t·ªìn t·∫°i
    const existingUserIds = existingMembers.map((m) => m.userId.toString());
    const userIdsToAdd = newUserIds.filter(
      (id) => !existingUserIds.includes(id.toString())
    );
    const membersToReactivate = existingMembers.filter((m) => !m.active);

    // T√°i k√≠ch ho·∫°t c√°c Member ƒë√£ t·ªìn t·∫°i nh∆∞ng kh√¥ng active
    if (membersToReactivate.length > 0) {
      await Member.updateMany(
        { _id: { $in: membersToReactivate.map((m) => m._id) } },
        { active: true }
      );
    }
    // T·∫°o c√°c th√†nh vi√™n m·ªõi
    const membersToCreate = userIdsToAdd.map((userId) => ({
      conversationId,
      userId,
      name: userMap.get(userId.toString()) || "Unknown",
      active: true,
    }));
    // T·∫°o c√°c th√†nh vi√™n m·ªõi trong c∆° s·ªü d·ªØ li·ªáu
    const newMembers =
      membersToCreate.length > 0
        ? await Member.insertMany(membersToCreate)
        : [];
    const allAddedMembers = [...membersToReactivate, ...newMembers];
    conversation.members.push(...newMembers.map((m) => m._id));
    if (allAddedMembers.length === 0) {
      throw new Error("All provided users are already active members");
    }
    // C·∫≠p nh·∫≠t danh s√°ch th√†nh vi√™n trong h·ªôi tho·∫°i
    const channelId = await this.getDefaultChannelId(conversationId);

    // T·∫°o tin nh·∫Øn NOTIFY ri√™ng cho t·ª´ng th√†nh vi√™n ƒë∆∞·ª£c th√™m
    const notifyMessages = await Promise.all(
      allAddedMembers.map(async (newMember) => {
        const message = await Message.createMessage({
          memberId: requestingMember._id, // Ng∆∞·ªùi g·ª≠i (A)
          content: `${requestingMember.name} ƒë√£ th√™m ${newMember.name} v√†o nh√≥m`,
          type: "NOTIFY",
          action: "ADD",
          actionData: {
            targetId: newMember._id, // Ng∆∞·ªùi ƒë∆∞·ª£c th√™m (B)
          },
          conversationId,
          channelId,
        });
        return message;
      })
    );

    conversation.lastMessageId = notifyMessages[notifyMessages.length - 1]._id;
    await conversation.save();

    const addedMembers = allAddedMembers.map((member) => ({
      memberId: member._id,
      userId: member.userId,
      name: member.name,
    }));

    return { addedMembers, notifyMessages };
  },
  // X√≥a th√†nh vi√™n kh·ªèi h·ªôi tho·∫°i
  async removeMemberFromConversation(conversationId, userId, memberIdToRemove) {
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }
    if (!conversation.type) {
      throw new Error("Cannot remove members from an individual conversation");
    }

    const requestingMember = await Member.findOne({ conversationId, userId });
    if (!requestingMember) {
      throw new Error("You are not a member of this conversation");
    }

    if (!this.checkManager(conversation, requestingMember._id.toString())) {
      throw new Error("You do not have permission to remove members");
    }

    const memberToRemove = await Member.findOne({
      _id: memberIdToRemove,
      conversationId,
    });
    if (!memberToRemove) {
      throw new Error("Member not found in this conversation");
    }

    if (conversation.leaderId.toString() === memberIdToRemove.toString()) {
      throw new Error("Leader cannot remove themselves from the group");
    }

    // C·∫≠p nh·∫≠t active th√†nh false thay v√¨ x√≥a
    memberToRemove.active = false;
    memberToRemove.leftAt = new Date();
    await memberToRemove.save();

    // Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t Conversation.members, v√¨ Member v·∫´n t·ªìn t·∫°i trong DB
    // Ch·ªâ c·∫ßn ki·ªÉm tra active khi l·∫•y danh s√°ch th√†nh vi√™n

    const channelId = await this.getDefaultChannelId(conversationId);
    const notifyMessage = await Message.createMessage({
      memberId: requestingMember._id,
      content: `${requestingMember.name} ƒë√£ x√≥a ${memberToRemove.name} kh·ªèi nh√≥m`,
      type: "NOTIFY",
      action: "REMOVE",
      actionData: {
        targetId: memberToRemove._id,
      },
      conversationId,
      channelId,
    });

    conversation.lastMessageId = notifyMessage._id;
    await conversation.save();

    return {
      removedMember: {
        memberId: memberToRemove._id,
        userId: memberToRemove.userId,
        name: memberToRemove.name,
      },
      notifyMessage,
    };
  },
  // Th√™m ph√≥ nh√≥m v√†o h·ªôi tho·∫°i
  async addManagersToConversation(conversationId, userId, newManagerIds) {
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }
    if (!conversation.type) {
      throw new Error("Cannot add managers to an individual conversation");
    }

    const requestingMember = await Member.findOne({ conversationId, userId });
    if (!requestingMember) {
      throw new Error("You are not a member of this conversation");
    }

    // Ch·ªâ leader ƒë∆∞·ª£c th√™m ph√≥ nh√≥m
    if (conversation.leaderId.toString() !== requestingMember._id.toString()) {
      throw new Error("Only the group leader can add managers");
    }

    // Ki·ªÉm tra c√°c memberIds h·ª£p l·ªá v√† active
    const members = await Member.find({
      _id: { $in: newManagerIds },
      conversationId,
      active: { $ne: false },
    }).lean();
    if (members.length !== newManagerIds.length) {
      throw new Error(
        "One or more members not found or inactive in this conversation"
      );
    }

    // Lo·∫°i b·ªè c√°c memberIds ƒë√£ l√† manager
    const existingManagerIds = conversation.managerIds.map((id) =>
      id.toString()
    );
    const managerIdsToAdd = newManagerIds.filter(
      (id) => !existingManagerIds.includes(id.toString())
    );

    if (managerIdsToAdd.length === 0) {
      throw new Error("All provided members are already managers");
    }

    // C·∫≠p nh·∫≠t managerIds trong Conversation
    conversation.managerIds.push(...managerIdsToAdd);

    // T·∫°o tin nh·∫Øn NOTIFY cho t·ª´ng ph√≥ nh√≥m ƒë∆∞·ª£c th√™m
    const channelId = await this.getDefaultChannelId(conversationId);
    const notifyMessages = await Promise.all(
      managerIdsToAdd.map(async (managerId) => {
        const newManager = members.find(
          (m) => m._id.toString() === managerId.toString()
        );
        const message = await Message.createMessage({
          memberId: requestingMember._id, // Ng∆∞·ªùi th√™m (A)
          content: `${requestingMember.name} ƒë√£ th√™m ${newManager.name} l√†m ph√≥ nh√≥m`,
          type: "NOTIFY",
          action: "UPDATE",
          actionData: {
            targetId: newManager._id, // Ng∆∞·ªùi ƒë∆∞·ª£c th√™m l√†m ph√≥ nh√≥m (B)
          },
          conversationId,
          channelId,
        });
        return message;
      })
    );

    conversation.lastMessageId = notifyMessages[notifyMessages.length - 1]._id;
    await conversation.save();

    // Tr·∫£ v·ªÅ danh s√°ch ph√≥ nh√≥m m·ªõi ƒë∆∞·ª£c th√™m
    const addedManagers = members
      .filter((m) => managerIdsToAdd.includes(m._id.toString()))
      .map((member) => ({
        memberId: member._id,
        userId: member.userId,
        name: member.name,
      }));

    return { addedManagers, notifyMessages };
  },
  async getDefaultChannelId(conversationId) {
    const channel = await Channel.findOne({
      conversationId,
      name: "Main",
    }).lean();
    return channel ? channel._id : null;
  },
};
module.exports = ConversationService;
