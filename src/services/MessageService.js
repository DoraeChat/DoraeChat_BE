const Message = require("../models/Message");
const Conversation = require("../models/Conversation");
const redisClient = require("../config/redis");

const BASE_KEY = `messages:${conversationId}`;
const CURSOR_KEY = `${BASE_KEY}:cursor:${beforeTimestamp || "latest"}`; // Cho infinite scroll
const PAGE_KEY = `${BASE_KEY}:page:${skip}:${limit}`; // Cho ph√¢n trang truy·ªÅn th·ªëng

class MessageService {
  // üîπ G·ª≠i tin nh·∫Øn vƒÉn b·∫£n
  async sendTextMessage(userId, conversationId, content) {
    if (!content.trim()) {
      throw new Error("Message content cannot be empty");
    }

    // Ki·ªÉm tra xem cu·ªôc tr√≤ chuy·ªán c√≥ t·ªìn t·∫°i kh√¥ng
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }

    // Ki·ªÉm tra xem user c√≥ thu·ªôc cu·ªôc tr√≤ chuy·ªán kh√¥ng
    if (!conversation.members.includes(userId)) {
      throw new Error("You are not a member of this conversation");
    }

    // T·∫°o tin nh·∫Øn m·ªõi
    const message = new Message({
      userId,
      conversationId,
      content,
      type: "TEXT",
    });

    await message.save();

    // C·∫≠p nh·∫≠t tin nh·∫Øn cu·ªëi c√πng trong cu·ªôc tr√≤ chuy·ªán
    conversation.lastMessageId = message._id;
    await conversation.save();

    return message;
  }

  // L·∫•y danh s√°ch tin nh·∫Øn theo h·ªôi tho·∫°i gi·ªõi h·∫°n 20 tin nh·∫Øn
  async getMessagesByConversationId(
    conversationId,
    userId,
    { skip = 0, limit = 20, beforeTimestamp = null } = {}
  ) {
    // 1. Validate conversation
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }
    if (!conversation.members.includes(userId)) {
      throw new Error("You are not a member of this conversation");
    }

    // 2. X√°c ƒë·ªãnh cache key
    const cacheKey = beforeTimestamp
      ? `messages:${conversationId}:cursor:${beforeTimestamp}`
      : `messages:${conversationId}:page:${skip}:${limit}`;

    // 3. Th·ª≠ l·∫•y t·ª´ cache tr∆∞·ªõc
    const cachedMessages = await redis.get(cacheKey);
    if (cachedMessages) {
      return JSON.parse(cachedMessages);
    }

    // 4. Build query n·∫øu kh√¥ng c√≥ cache
    const query = {
      conversationId,
      deletedUserIds: { $nin: [userId] },
    };

    if (beforeTimestamp) {
      query.createdAt = { $lt: new Date(beforeTimestamp) };
    }

    // 5. Truy v·∫•n
    const messages = await Message.find(query)
      .sort({ createdAt: -1 }) // s·∫Øp x·∫øp m·ªõi -> c≈©
      .skip(skip)
      .limit(limit)
      .lean();

    // 6. L∆∞u v√†o cache v·ªõi TTL
    if (messages.length > 0) {
      await redisClient.set(cacheKey, JSON.stringify(messages), 300); // 5 ph√∫t

      // ƒê·ªìng b·ªô cache ph·ª• tr·ª£
      await syncMessageCache(conversationId, messages);
    }

    return messages;
  }

  /**
   * ƒê·ªìng b·ªô cache tin nh·∫Øn theo 3 l·ªõp:
   * 1. Cache t·ª´ng tin nh·∫Øn ri√™ng l·∫ª (cho truy v·∫•n nhanh qua messageId)
   * 2. Sorted Set l∆∞u tr·∫≠t t·ª± tin nh·∫Øn trong conversation (theo th·ªùi gian)
   * 3. Cache ph√¢n trang theo cursor/offset (h·ªó tr·ª£ infinite scroll)
   */
  async syncMessageCache(conversationId, messages) {
    if (!messages || messages.length === 0) return;

    // 1. Cache t·ª´ng tin nh·∫Øn ri√™ng l·∫ª v·ªõi TTL d√†i h∆°n
    const individualCachePromises = messages.map((msg) => {
      const messageKey = `message:${msg._id}`;
      return redisClient.set(
        messageKey,
        JSON.stringify(msg),
        3600 * 24 // TTL 24 gi·ªù cho tin nh·∫Øn ri√™ng l·∫ª
      );
    });

    // 2. C·∫≠p nh·∫≠t Sorted Set c·ªßa conversation (ZSET)
    // - Score: timestamp c·ªßa tin nh·∫Øn (ƒë·ªÉ s·∫Øp x·∫øp)
    // - Member: messageId
    const zsetKey = `conversation:${conversationId}:messages`;
    const zsetUpdates = messages.flatMap((msg) => [
      new Date(msg.createdAt).getTime(), // Score
      msg._id.toString(), // Member
    ]);

    // 3. Cache ph·ª• tr·ª£ cho infinite scroll:
    // - L∆∞u theo cursor (timestamp c·ªßa tin nh·∫Øn c≈© nh·∫•t)
    const cursorCachePromises = messages.map((msg) => {
      const cursorKey = `messages:${conversationId}:cursor:${new Date(
        msg.createdAt
      ).getTime()}`;
      return redis.set(
        cursorKey,
        JSON.stringify([msg]), // L∆∞u m·∫£ng 1 ph·∫ßn t·ª≠ ƒë·ªÉ t√°i s·ª≠ d·ª•ng code
        "EX",
        300 // TTL 5 ph√∫t
      );
    });

    // Th·ª±c thi ƒë·ªìng th·ªùi t·∫•t c·∫£ c·∫≠p nh·∫≠t cache
    await Promise.all([
      ...individualCachePromises,
      redis.zadd(zsetKey, ...zsetUpdates),
      ...cursorCachePromises,
    ]);

    // 4. Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc Sorted Set (tr√°nh memory leak)
    const maxMessagesInCache = 1000;
    await redis.zremrangebyrank(zsetKey, 0, -maxMessagesInCache - 1);

    // 5. C·∫≠p nh·∫≠t TTL cho Sorted Set
    await redis.expire(zsetKey, 3600 * 24 * 7); // TTL 1 tu·∫ßn
  }

  // L·∫•y tin nh·∫Øn theo ID
  async getMessageById(messageId) {
    return await Message.getById(messageId);
  }

  // ƒê·∫øm tin nh·∫Øn ch∆∞a ƒë·ªçc
  async countUnreadMessages(time, conversationId) {
    return await Message.countUnread(time, conversationId);
  }
}

module.exports = new MessageService();
