const ConversationService = require("../services/ConversationService");

class ConversationController {
  // [GET] /api/conversations - L·∫•y danh s√°ch h·ªôi tho·∫°i c·ªßa ng∆∞·ªùi d√πng
  async getListByUserId(req, res) {
    try {
      const userId = req._id; // L·∫•y userId t·ª´ token
      const conversations = await ConversationService.getListByUserId(userId);
      res.status(200).json(conversations);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
  // [POST] /api/conversations/individuals/:userId - T·∫°o ho·∫∑c l·∫•y cu·ªôc tr√≤ chuy·ªán c√° nh√¢n
  async createOrGetIndividualConversation(req, res) {
    try {
      const userId = req._id;
      const userId2 = req.params.userId;
      if (userId === userId2) {
        return res
          .status(400)
          .json({ message: "Cannot create conversation with yourself" });
      }

      const conversation =
        await ConversationService.findOrCreateIndividualConversation(
          userId,
          userId2
        );
      res.status(201).json(conversation);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
  //  T·∫°o nh√≥m h·ªôi tho·∫°i
  async createGroupConversation(req, res) {
    try {
      const { name, members } = req.body;
      const leaderId = req._id; // Ng∆∞·ªùi t·∫°o nh√≥m

      // ƒê·∫£m b·∫£o danh s√°ch th√†nh vi√™n ch·ª©a leaderId
      if (!members.includes(leaderId)) {
        members.push(leaderId);
      }

      const conversation = await ConversationService.createGroupConversation(
        name,
        members,
        leaderId
      );
      res.status(201).json(conversation);
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }
  // üîπ ƒê·ªïi t√™n nh√≥m h·ªôi tho·∫°i
  async updateGroupName(req, res) {
    try {
      const { name } = req.body;
      const conversationId = req.params.id;
      const userId = req._id; // Ng∆∞·ªùi th·ª±c hi·ªán ƒë·ªïi t√™n

      if (!name) {
        return res.status(400).json({ message: "Group name is required" });
      }

      const conversation = await ConversationService.updateGroupName(
        conversationId,
        name,
        userId
      );
      res.status(200).json(conversation);
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }
  async getConversationById(req, res) {
    try {
      const conversation = await ConversationService.getConversationById(
        req.params.id
      );
      res.status(200).json(conversation);
    } catch (error) {
      res.status(404).json({ message: "Conversation not found" });
    }
  }
}

module.exports = new ConversationController();
