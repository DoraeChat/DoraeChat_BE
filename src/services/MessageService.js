const Message = require("../models/Message");
const Conversation = require("../models/Conversation");
const Member = require("../models/Member");
const Channel = require("../models/Channel");
const redisClient = require("../config/redis");
const CustomError = require("../exceptions/CustomError");
const NotFoundError = require("../exceptions/NotFoundError");
const CloudinaryService = require("./CloudinaryService");
const emoji = require('node-emoji');

class MessageService {
  // üîπ G·ª≠i tin nh·∫Øn vƒÉn b·∫£n
  async sendTextMessage(userId, conversationId, content, channelId = null) {
    if (!content.trim()) {
      throw new Error("Message content cannot be empty");
    }
    content = emoji.emojify(content); 

    // Ki·ªÉm tra member
    const member = await Member.getByConversationIdAndUserId(
      conversationId,
      userId
    );
    if (!member) {
      throw new Error("You are not a member of this conversation");
    }
    if (!member.active) {
      throw new Error(
        "You are no longer an active member of this conversation"
      );
    }

    // Ki·ªÉm tra conversation
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }

    // Ki·ªÉm tra lo·∫°i conversation v√† channelId
    if (conversation.type && !channelId) {
      throw new Error("Channel ID is required for group conversations");
    }
    if (!conversation.type && channelId) {
      throw new Error(
        "Channel ID is not applicable for individual conversations"
      );
    }

    // N·∫øu l√† group, ki·ªÉm tra channel
    let validChannelId = null;
    if (conversation.type) {
      const channel = await Channel.findById(channelId);
      if (
        !channel ||
        channel.conversationId.toString() !== conversationId.toString()
      ) {
        throw new Error(
          "Invalid or non-existent channel for this conversation"
        );
      }
      validChannelId = channel._id;
    }

    // T·∫°o tin nh·∫Øn m·ªõi
    const newMessage = await Message.create({
      memberId: member._id,
      content,
      type: "TEXT",
      conversationId,
      ...(validChannelId && { channelId: validChannelId }), // Ch·ªâ th√™m channelId n·∫øu c√≥
    });

    const populatedMessage = await Message.findById(newMessage._id)
      .populate({
        path: "memberId",
        select: "userId",
      })
      .lean();

    // C·∫≠p nh·∫≠t cache (n·∫øu d√πng)
    // await this.syncMessageCache(conversationId, [newMessage]);

    // C·∫≠p nh·∫≠t tin nh·∫Øn cu·ªëi c√πng trong cu·ªôc tr√≤ chuy·ªán
    conversation.lastMessageId = newMessage._id;
    await conversation.save();

    return populatedMessage;
  }

  // L·∫•y danh s√°ch tin nh·∫Øn theo h·ªôi tho·∫°i gi·ªõi h·∫°n 20 tin nh·∫Øn
  async getMessagesByConversationId(
    conversationId,
    userId,
    { skip = 0, limit = 100, beforeTimestamp = null } = {}
  ) {
    // 1. Validate conversation
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }
    const member = await Member.getByConversationIdAndUserId(
      conversationId,
      userId
    );
    if (!member) {
      throw new Error("You are not a member of this conversation");
    }
    // 2. X√°c ƒë·ªãnh cache key
    // const cacheKey = beforeTimestamp
    //   ? `messages:${conversationId}:cursor:${beforeTimestamp}`
    //   : `messages:${conversationId}:page:${skip}:${limit}`;

    // 3. Th·ª≠ l·∫•y t·ª´ cache tr∆∞·ªõc
    // const cachedMessages = await redisClient.get(cacheKey);
    // if (cachedMessages) {
    //   return JSON.parse(cachedMessages); // bug
    // }

    // 4. Build query n·∫øu kh√¥ng c√≥ cache
    const messages = await Message.getListForIndividualConversation(
      conversationId,
      member._id,
      {
        skip,
        limit,
        beforeTimestamp,
        hideBeforeTime: member.hideBeforeTime, // Truy·ªÅn hideBeforeTime t·ª´ member
      }
    );
    // 6. L∆∞u v√†o cache v·ªõi TTL
    // if (messages && messages.length > 0) {
    //   await redisClient.set(cacheKey, JSON.stringify(messages), 300);
    //   await this.syncMessageCache(conversationId, messages);
    // }
    return messages;
  }
  // L·∫•y danh s√°ch tin nh·∫Øn theo channelId
  async getMessagesByChannelId(channelId, userId, skip, limit) {
    try {
      // Ki·ªÉm tra xem channelId c√≥ h·ª£p l·ªá kh√¥ng
      const channel = await Channel.getById(channelId);
      if (!channel) {
        throw new Error("Channel not found");
      }
      // Ki·ªÉm tra xem userId c√≥ ph·∫£i l√† th√†nh vi√™n c·ªßa channel kh√¥ng
      try {
        await Conversation.getByIdAndUserId(channel.conversationId, userId);
      } catch (error) {
        throw new Error("You are not a member of this channel");
      }
      // G·ªçi ph∆∞∆°ng th·ª©c tƒ©nh t·ª´ MessageSchema
      const messages = await Message.getListByChannelIdAndUserId(
        channelId,
        userId,
        skip,
        limit
      );
      return messages;
    } catch (error) {
      throw new Error(`Error fetching messages: ${error.message}`);
    }
  }
  // thu h·ªìi tin nh·∫Øn
  async recallMessage(conversationId, userId, messageId) {
    // Ki·ªÉm tra cu·ªôc tr√≤ chuy·ªán
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) {
      throw new Error("Conversation not found");
    }

    // Ki·ªÉm tra th√†nh vi√™n
    const member = await Member.getByConversationIdAndUserId(
      conversationId,
      userId
    );
    if (!member) {
      throw new Error("You are not a member of this conversation");
    }

    // T√¨m tin nh·∫Øn
    const message = await Message.findOne({
      _id: messageId,
      conversationId,
    });
    if (!message) {
      throw new Error("Message not found in this conversation");
    }

    // Ki·ªÉm tra quy·ªÅn thu h·ªìi: ch·ªâ ng∆∞·ªùi g·ª≠i ƒë∆∞·ª£c thu h·ªìi
    if (message.memberId.toString() !== member._id.toString()) {
      throw new Error("You can only recall your own messages");
    }

    if (message.isDeleted) {
      throw new Error("Message has already been recalled");
    }

    // C√°c lo·∫°i tin nh·∫Øn c·∫ßn c·∫≠p nh·∫≠t content
    const recallableTypes = [
      "TEXT",
      "IMAGE",
      "STICKER",
      "VIDEO",
      "FILE",
      "AUDIO",
    ];

    if (recallableTypes.includes(message.type)) {
      message.content = "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c thu h·ªìi";
    }

    // ƒê√°nh d·∫•u tin nh·∫Øn l√† ƒë√£ thu h·ªìi
    message.isDeleted = true;
    await message.save();

    // C·∫≠p nh·∫≠t cache n·∫øu c·∫ßn (t√πy ch·ªçn)
    // await this.syncMessageCache(conversationId, [message]);

    return message;
  }
  // l·∫•y tin nh·∫Øn theo id
  async getMessageById(messageId) {
    try {
      const message = await Message.getById(messageId);
      return message;
    } catch (error) {
      throw new Error("Message not found");
    }
  }

  /**
   * ƒê·ªìng b·ªô cache tin nh·∫Øn theo 3 l·ªõp:
   * 1. Cache t·ª´ng tin nh·∫Øn ri√™ng l·∫ª (cho truy v·∫•n nhanh qua messageId)
   * 2. Sorted Set l∆∞u tr·∫≠t t·ª± tin nh·∫Øn trong conversation (theo th·ªùi gian)
   * 3. Cache ph√¢n trang theo cursor/offset (h·ªó tr·ª£ infinite scroll)
   */
  async syncMessageCache(conversationId, messages) {
    if (!messages || messages.length === 0) return;

    // 1. Cache t·ª´ng tin nh·∫Øn ri√™ng l·∫ª v·ªõi TTL d√†i h∆°n
    const individualCachePromises = messages.map((msg) => {
      const messageKey = `message:${msg._id}`;
      return redisClient.set(
        messageKey,
        JSON.stringify(msg),
        3600 * 24 // TTL 24 gi·ªù cho tin nh·∫Øn ri√™ng l·∫ª
      );
    });

    // 2. C·∫≠p nh·∫≠t Sorted Set c·ªßa conversation (ZSET)
    // - Score: timestamp c·ªßa tin nh·∫Øn (ƒë·ªÉ s·∫Øp x·∫øp)
    // - Member: messageId
    const zsetKey = `conversation:${conversationId}:messages`;
    const zsetUpdates = messages.flatMap((msg) => [
      new Date(msg.createdAt).getTime(), // Score
      msg._id.toString(), // Member
    ]);

    // 3. Cache ph·ª• tr·ª£ cho infinite scroll:
    // - L∆∞u theo cursor (timestamp c·ªßa tin nh·∫Øn c≈© nh·∫•t)
    const cursorCachePromises = messages.map((msg) => {
      const cursorKey = `messages:${conversationId}:cursor:${new Date(
        msg.createdAt
      ).getTime()}`;
      return redisClient.set(
        cursorKey,
        JSON.stringify([msg]), // L∆∞u m·∫£ng 1 ph·∫ßn t·ª≠ ƒë·ªÉ t√°i s·ª≠ d·ª•ng code
        300 // TTL 5 ph√∫t
      );
    });

    // Th·ª±c thi ƒë·ªìng th·ªùi t·∫•t c·∫£ c·∫≠p nh·∫≠t cache
    await Promise.all([
      ...individualCachePromises,
      redisClient.zadd(zsetKey, ...zsetUpdates),
      ...cursorCachePromises,
    ]);

    // 4. Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc Sorted Set (tr√°nh memory leak)
    const maxMessagesInCache = 1000;
    await redisClient.zremrangebyrank(zsetKey, 0, -maxMessagesInCache - 1);

    // 5. C·∫≠p nh·∫≠t TTL cho Sorted Set
    await redisClient.expire(zsetKey, 3600 * 24 * 7); // TTL 1 tu·∫ßn
  }

  // L·∫•y tin nh·∫Øn theo ID
  async getMessageById(messageId) {
    return await Message.getById(messageId);
  }

  // ƒê·∫øm tin nh·∫Øn ch∆∞a ƒë·ªçc
  async countUnreadMessages(time, conversationId) {
    return await Message.countUnread(time, conversationId);
  }

  async sendImageMessage(userId, conversationId, files, channelId = null) {
    const member = await Member.getByConversationIdAndUserId(conversationId, userId);
    if (!member || !member.active) throw new CustomError("Invalid member", 400);
  
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) throw new NotFoundError("Conversation");
  
    let validChannelId = null;
    if (conversation.type) {
      if (!channelId) throw new CustomError("Channel ID required", 400);
      const channel = await Channel.findById(channelId);
      if (!channel || channel.conversationId.toString() !== conversationId.toString())
        throw new CustomError("Invalid channel", 400);
      validChannelId = channel._id;
    }
  
    const uploaded = await CloudinaryService.uploadImagesMessage(conversationId, files);
  
    const messages = await Promise.all(uploaded.map(async (img) => {
      const message = await Message.create({
        memberId: member._id,
        content: img.url,
        type: "IMAGE",
        conversationId,
        ...(validChannelId && { channelId: validChannelId }),
      });
      return Message.findById(message._id).populate("memberId", "userId").lean();
    }));
  
    // C·∫≠p nh·∫≠t lastMessageId cho cu·ªôc tr√≤ chuy·ªán
    const last = messages[messages.length - 1];
    if (last) {
      conversation.lastMessageId = last._id;
      await conversation.save();
    }
  
    return messages;
  }

  async sendVideoMessage(userId, conversationId, file, channelId = null) {
    const member = await Member.getByConversationIdAndUserId(conversationId, userId);
    if (!member || !member.active) throw new CustomError("Invalid member", 400);
  
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) throw new NotFoundError("Conversation");
  
    let validChannelId = null;
    if (conversation.type) {
      if (!channelId) throw new CustomError("Channel ID required", 400);
      const channel = await Channel.findById(channelId);
      if (!channel || channel.conversationId.toString() !== conversationId.toString())
        throw new CustomError("Invalid channel", 400);
      validChannelId = channel._id;
    }
  
    const uploaded = await CloudinaryService.uploadVideoMessage(conversationId, file);
  
    const message = await Message.create({
      memberId: member._id,
      content: uploaded.url,
      type: "VIDEO",
      conversationId,
      ...(validChannelId && { channelId: validChannelId }),
    });
  
    // C·∫≠p nh·∫≠t lastMessageId cho cu·ªôc tr√≤ chuy·ªán
    conversation.lastMessageId = message._id;
    await conversation.save();
  
    return Message.findById(message._id).populate("memberId", "userId").lean();
  }

  async sendFileMessage(userId, conversationId, file, channelId = null) {
    const member = await Member.getByConversationIdAndUserId(conversationId, userId);
    if (!member || !member.active) throw new CustomError("Invalid member", 400);
  
    const conversation = await Conversation.findById(conversationId);
    if (!conversation) throw new NotFoundError("Conversation");
  
    let validChannelId = null;
    if (conversation.type) {
      if (!channelId) throw new CustomError("Channel ID required", 400);
      const channel = await Channel.findById(channelId);
      if (!channel || channel.conversationId.toString() !== conversationId.toString())
        throw new CustomError("Invalid channel", 400);
      validChannelId = channel._id;
    }
  
    const uploaded = await CloudinaryService.uploadFileMessage(conversationId, file);
  
    const message = await Message.create({
      memberId: member._id,
      content: uploaded.url,
      type: "FILE",
      conversationId,
      ...(validChannelId && { channelId: validChannelId }),
    });
  
    // C·∫≠p nh·∫≠t lastMessageId cho cu·ªôc tr√≤ chuy·ªán
    conversation.lastMessageId = message._id;
    await conversation.save();
  
    return Message.findById(message._id).populate("memberId", "userId").lean();
  }
}

module.exports = new MessageService();
